import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { RootState } from "../../app/store"
import axios from "axios"

export interface Card {
  id: number
  name: string
  abilities: string[]
  count: number
}

export interface Land extends Card {
  colors: string[]
}

export interface Spell extends Card {
  manaCost: string[]
  type: string
}

export interface Creature extends Spell {
  power: number
  toughness: number
  attributes: string[]
}

export interface CardState {
  value: Card | Land | Spell | Creature
  status: "idle" | "loading" | "failed"
}

export function isLand(object: any): object is Land {
  return "colors" in object
}

export function isSpell(object: any): object is Spell {
  return "manaCost" in object
}

export function isCreature(object: any): object is Creature {
  return "power" in object
}

const initialState: CardState = {
  value: { id: 0, name: "", abilities: [], count: 0 },
  status: "idle",
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getCardById = createAsyncThunk(
  "cards/getCardByIdStatus",
  async (card_id: number) => {
    const response = await axios(`http://127.0.0.1:8080/cards/${card_id}`, {
      headers: {
        "Content-Type": "application/json",
        "X-API-KEY": "SuperSecretToken",
      },
    })
    return response.data
  },
)

export const cardSlice = createSlice({
  name: "card",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateCard: (state, action: PayloadAction<Card>) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value.id = action.payload.id
      state.value.name = action.payload.name
      state.value.abilities = action.payload.abilities
      if (isLand(action.payload)) {
        const land = state.value as Land
        land.colors = action.payload.colors
      }
      if (isSpell(action.payload)) {
        const spell = state.value as Spell
        spell.manaCost = action.payload.manaCost
        spell.type = action.payload.type
        if (isCreature(action.payload)) {
          const creature = state.value as Creature
          creature.power = action.payload.power
          creature.toughness = action.payload.toughness
          creature.attributes = action.payload.attributes
        }
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getCardById.pending, (state) => {
        state.status = "loading"
      })
      .addCase(getCardById.fulfilled, (state, action) => {
        state.status = "idle"
        cardSlice.caseReducers.updateCard(state, action)
      })
      .addCase(getCardById.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { updateCard } = cardSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCard = (state: RootState) => state.card.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default cardSlice.reducer
